/**
 * This work is provided under the terms of the CREATIVE COMMONS PUBLIC
 * LICENSE. This work is protected by copyright and/or other applicable
 * law. Any use of the work other than as authorized under this license
 * or copyright law is prohibited.
 *
 * http://creativecommons.org/licenses/by-nc-sa/2.5/
 *
 * Â© 2016 OX Software GmbH, Germany. info@open-xchange.com
 *
 * @author Matthias Biggeleben <matthias.biggeleben@open-xchange.com>
 */

/**
 * LESS is distributed under the terms of the Apache License, Version 2.0
 */
/* eslint requirejs/no-object-define: 0 */
/* global assert */

(function () {

    function dirname(filename) {
        return filename.replace(/(?:^|(\/))[^/]+$/, '$1');
    }

    function relativeCSS(path, css) {
        return css.replace(/url\((\s*["']?)(?!\/|[A-Za-z][A-Za-z0-9+.-]*:)/g, 'url($1' + path);
    }

    function insert(name, css, selector, node) {
        if (node) return node.text(css);
        return $('<style type="text/css">').text(css)
            .attr('data-require-src', name)
            .insertBefore(selector);
    }

    // css plugin
    define('css', {
        load: function (name, parentRequire, load, config) {
            require(['text!' + name], function (css) {
                var path = config.baseUrl + name;
                load(insert(path, relativeCSS(dirname(path), css), '#css'));
            });
        }
    });

    // LessCSS files of the current theme.
    var themeCommon = { name: 'common', selector: '#theme' },
        themeStyle = { name: 'style', selector: '#custom' },
        // List of LessCSS files to update for theme changes.
        lessFiles = [themeCommon, themeStyle];

    function insertLess(file) {
        return require(['text!themes/' + ox.theme + '/' + file.name + '.css'], function (css) {
            file.node = insert(file.path, css, file.selector, file.node);
        });
    }

    define('less', {
        load: function (name, parentRequire, load, config) {
            name = name.replace(/\.less$/, '');
            var file = {
                path: config.baseUrl + name,
                name: name,
                selector: '#css'
            };
            lessFiles.push(file);
            if (ox.theme) {
                insertLess(file).then(load, load.error);
            } else {
                load();
            }
        }
    });

    // themes module
    define('themes', {
        /**
         * Loads a new theme.
         * @param {String} name The name of the new theme.
         * @type Promise
         * @returns A promise which gets fulfilled when the theme finishes
         * loading. Please ignore the value of the promise.
         */
        set: function (name) {
            if (ox.offline) {
                name = 'default'; // FIXME: App Cache manifest may have to be generated by backend
            }
            ox.theme = name;
            var path = ox.base + '/apps/themes/' + name + '/';
            _.updateFavicons(ox.overrideFaviconsPath || path);
            if (name !== 'login') {
                themeCommon.path = path + 'common';
                themeStyle.path = path + 'style';
                return $.when.apply($, _.map(lessFiles, insertLess));
            }
            return $.when();
        }
    });
}());

(function () {
    var callbacks = {}, lang = null, langDef = $.Deferred();
    define('gettext', {
        /**
         * Switches the language.
         * Only the signin page is allowed to call this multiple times.
         * @param {String} language The new language ID.
         * @returns A promise which gets resolved when all known gettext
         * modules have loaded their replacements.
         * @private
         */
        setLanguage: function (language) {
            assert(ox.signin || !this.language, 'Multiple setLanguage calls');
            lang = language;
            langDef.resolve();
            if (!ox.signin) {
                require(['io.ox/core/gettext'], function (gettext) {
                    gettext.setLanguage(lang);
                });
            }
            if (_.isEmpty(callbacks)) return $.when();
            var names = _.keys(callbacks);
            var files = _.map(names, function (n) { return n + '.' + lang; });
            return require(files, function () {
                var args = _.toArray(arguments);
                _.each(names, function (n, i) { callbacks[n](args[i]); });
            });
        },
        enable: function () {
            require(['io.ox/core/gettext'], function (gt) { gt.enable(); });
        },
        load: function (name, parentRequire, load) {
            assert(langDef.state !== 'pending', _.printf(
                'Invalid gettext dependency on %s (before login).', name));
            langDef.done(function () {
                // use specific language?
                // example: gettext!io.ox/core!ja_JP
                var index = name.indexOf('!'), language = lang;
                if (index !== -1) {
                    language = name.substr(index + 1);
                    name = name.substr(0, index);
                }
                parentRequire([name + '.' + language], ox.signin ? wrap : load, error);
            });
            function wrap(f) {
                var f2 = function () { return f.apply(this, arguments); };
                // _.each by foot to avoid capturing members of f in closures
                var f3 = function (i) {
                    f2[i] = function () { return f[i].apply(f, arguments); };
                };
                for (var i in f) {
                    f3(i);
                }
                callbacks[name] = function (newF) { f = newF; };
                load(f2);
            }
            function error() {
                require(['io.ox/core/gettext'], function (gt) {
                    load(gt(name, {
                        nplurals: 2,
                        plural: 'n != 1',
                        dictionary: {}
                    }));
                });
            }
        }
    });
}());

define('text', { load: function (name, parentRequire, load) {
    $.get(ox.base + '/apps/' + name).then(load, load.error);
} });

define('raw', { load: function (name, parentRequire, load) {
    $.get(ox.base + '/apps/' + name).then(load, load.error);
} });

define('withPluginsFor', {
    load: function (name, parentRequire, loaded) {
        parentRequire(ox.withPluginsFor(name, []), loaded);
    }
});

define('settings', ['io.ox/core/settings'], function (a) { return a; });
