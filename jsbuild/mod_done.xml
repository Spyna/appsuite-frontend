<?xml version="1.0" encoding="UTF-8"?>
<project name   ="mod_done"
		 basedir=".">

    <!-- =======================================================================
	  -->
    <macrodef name="mod_done.init">
	    <attribute name="out-path" default="${java.io.tmpdir}/builddev/done" />
        <sequential>

            <if>
                <isfalse value="mod_done.state.is-initialized" />
                <then>

                    <!-- base path where all done values will be stored. -->
                    <property name="mod_done.path.db" value="@{out-path}" />

					<echo message="done DB path = ${mod_done.path.db}" />
					<mkdir dir="${mod_done.path.db}" />

                    <property name="mod_done.state.is-initialized" value="true" />
                    
                </then>
            </if>

        </sequential>
    </macrodef>

    <!-- =======================================================================
         check if a done file exists for the given id.

         @param done-id [IN]
                the unique id of the done file.

         @param is-done [IN/OUT]
                name of an outside variable (!) to set the result state.
                return 'true' if sources was not changed and are up to date ...
                return 'false' otherwise.
	  -->
    <macrodef name="mod_done.is-done">

        <attribute name="done-id" />
        <attribute name="is-done" />

    	<sequential>

			<mod_done.init />

			<mod_done.-impl-name-done-file done-id  ="@{done-id}"
			                               done-file="local.done-file"
			/>

			<echo message="check done file '${local.done-file}' ..." />

			<if>
	        	<available file="${local.done-file}" />
	        	<then>
	        		<var name="@{is-done}" value="true" />
	        	</then>
	        	<else>
	        		<var name="@{is-done}" value="false" />
	        	</else>
	        </if>
	        
	        <if>
		        <istrue value="${build-dev.mode.force}" />
		        <then>
	        		<var name="@{is-done}" value="false" />
		        </then>
		    </if>
		    
		    <echo message="... done state is : ${@{is-done}}" />
	        
    	</sequential>
    </macrodef>

    <!-- =======================================================================
         generate new done file for given id.

         @param done-id [IN]
                the unique id of the done file.
	  -->
    <macrodef name="mod_done.set-done">

        <attribute name="done-id" />

        <sequential>
        
			<mod_done.init />

			<mod_done.-impl-name-done-file done-id  ="@{done-id}"
			                               done-file="local.done-file"
			/>

			<echo message="done=true"
	        	  file   ="${local.done-file}"
	        />

        </sequential>
    </macrodef>

    <!-- =======================================================================
         construct the name of the done file by using given id.

         @param done-id [IN]
                the id to be used as name for the file.

         @param done-file [OUT]
                the full qualified (path and file name) of the done file.
	  -->
    <macrodef name="mod_done.-impl-name-done-file">

        <attribute name="done-id"   />
        <attribute name="done-file" />

        <sequential>
        
			<mod_done.-impl-normalize-id id     ="@{done-id}"
			                             norm-id="local.norm-id"
			/>

            <var name ="@{done-file}"
            	 value="${mod_done.path.db}/${local.norm-id}.done"
            />

        </sequential>
    </macrodef>
    
    <!-- =======================================================================
         clean the DB so all done states are gone and we can start new and fresh .-)
	  -->
    <macrodef name="mod_done.clean-db">
    	<sequential>
    	
    	<delete dir="${mod_done.path.db}" />

        </sequential>
    </macrodef>

    <!-- =======================================================================
         normalize the given id.

         @param id [IN]
                the id to be normalized.

         @param norm-id [OUT]
                the normalized id.
	  -->
    <macrodef name="mod_done.-impl-normalize-id">

        <attribute name="id"      />
        <attribute name="norm-id" />

        <sequential>
        
			<mod_done.init  />
			<mod_utils.init />

			<var name="local.SEPARATOR"  value="_"     />
			<var name="local.norm-id"    value="@{id}" />

			<mod_utils.string-replace string      ="${local.norm-id}"
									  search      ="/"
									  replace-with="${local.SEPARATOR}"
									  result-prop ="local.norm-id-out"
			/>
			<var name="local.norm-id"
			    value="${local.norm-id-out}"
			/>

			<mod_utils.string-replace string      ="${local.norm-id}"
									  search      ="\"
									  replace-with="${local.SEPARATOR}"
									  result-prop ="local.norm-id-out"
			/>
			<var name="local.norm-id"
			    value="${local.norm-id-out}"
			/>

			<mod_utils.string-replace string      ="${local.norm-id}"
									  search      =":"
									  replace-with="${local.SEPARATOR}"
									  result-prop ="local.norm-id-out"
			/>
			<var name="local.norm-id"
			    value="${local.norm-id-out}"
			/>
			
			<var name ="@{norm-id}"
			     value="${local.norm-id}" />

        </sequential>
    </macrodef>

</project>
