/**
 * plugin.js
 *
 * Copyright, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('oximage', function(editor) {


    function getImageSize(url, callback) {
        var img = document.createElement('img');

        function done(width, height) {
            if (img.parentNode) {
                img.parentNode.removeChild(img);
            }

            callback({width: width, height: height});
        }

        img.onload = function() {
            done(img.clientWidth, img.clientHeight);
        };

        img.onerror = function() {
            done();
        };

        var style = img.style;
        style.visibility = 'hidden';
        style.position = 'fixed';
        style.bottom = style.left = 0;
        style.width = style.height = 'auto';

        document.body.appendChild(img);
        img.src = url;
    }

    function applyPreview(items) {
        tinymce.each(items, function(item) {
            item.textStyle = function() {
                return editor.formatter.getCssText({inline: 'img', classes: [item.value]});
            };
        });

        return items;
    }

    function showDialog(url) {
        var win,
            dom = editor.dom,
            el = $(editor.contentAreaContainer),
            imgElm = editor.selection.getNode(),
            data = {
                src: url,
                width: el.width() * 0.9
            },
            width, height, classListCtrl;

        function buildValues(listSettingName, dataItemName, defaultItems) {
            var selectedItem, items = [];

            tinymce.each(editor.settings[listSettingName] || defaultItems, function(target) {
                var item = {
                    text: target.text || target.title,
                    value: target.value
                };

                items.push(item);

                if (data[dataItemName] === target.value || (!selectedItem && target.selected)) {
                    selectedItem = item;
                }
            });

            if (selectedItem && !data[dataItemName]) {
                data[dataItemName] = selectedItem.value;
                selectedItem.selected = true;
            }

            return items;
        }

        function recalcSize() {
            var widthCtrl, heightCtrl, newWidth, newHeight;

            widthCtrl = win.find('#width')[0];
            heightCtrl = win.find('#height')[0];

            newWidth = widthCtrl.value();
            newHeight = heightCtrl.value();

            if (win.find('#constrain')[0].checked() && width && height && newWidth && newHeight) {
                if (width != newWidth) {
                    newHeight = Math.round((newWidth / width) * newHeight);
                    heightCtrl.value(newHeight);
                } else {
                    newWidth = Math.round((newHeight / height) * newWidth);
                    widthCtrl.value(newWidth);
                }
            }

            width = newWidth;
            height = newHeight;
        }

        function onSubmitForm() {
            function waitLoad(imgElm) {
                function selectImage() {
                    imgElm.onload = imgElm.onerror = null;
                    editor.selection.select(imgElm);
                    editor.nodeChanged();
                }

                imgElm.onload = function() {
                    if (!data.width && !data.height) {
                        dom.setAttribs(imgElm, {
                            width: imgElm.clientWidth,
                            height: imgElm.clientHeight
                        });
                    }
                };

                imgElm.onerror = selectImage;
            }

            recalcSize();

            data = tinymce.extend(data, win.toJSON());

            if (!data.alt) {
                data.alt = '';
            }

            if (data.width === '') {
                data.width = null;
            }

            if (data.height === '') {
                data.height = null;
            }

            if (data.style === '') {
                data.style = null;
            }

            data = {
                src: data.src,
                alt: data.alt,
                width: data.width,
                height: data.height,
                style: data.style,
                "class": data["class"]
            };

            if (!data["class"]) {
                delete data["class"];
            }

            editor.undoManager.transact(function() {
                if (!data.src) {
                    if (imgElm) {
                        dom.remove(imgElm);
                        editor.focus();
                        editor.nodeChanged();
                    }

                    return;
                }

                if (!imgElm) {
                    data.id = '__mcenew';
                    editor.focus();
                    editor.selection.setContent(dom.createHTML('img', data));
                    imgElm = dom.get('__mcenew');
                    dom.setAttrib(imgElm, 'id', null);
                } else {
                    dom.setAttribs(imgElm, data);
                }

                waitLoad(imgElm);
            });
        }

        function removePixelSuffix(value) {
            if (value) {
                value = value.replace(/px$/, '');
            }

            return value;
        }

        function srcChange() {
            getImageSize(this.value(), function(data) {
                if (data.width && data.height) {
                    width = data.width;
                    height = data.height;

                    win.find('#width').value(width);
                    win.find('#height').value(height);
                }
            });
        }

        width = dom.getAttrib(imgElm, 'width');
        height = dom.getAttrib(imgElm, 'height');

        if (imgElm.nodeName == 'IMG' && !imgElm.getAttribute('data-mce-object') && !imgElm.getAttribute('data-mce-placeholder')) {
            data = {
                src: dom.getAttrib(imgElm, 'src'),
                alt: dom.getAttrib(imgElm, 'alt'),
                "class": dom.getAttrib(imgElm, 'class'),
                width: width,
                height: height
            };
        } else {
            imgElm = null;
        }

        // General settings shared between simple and advanced dialogs
        var generalFormItems = [
            {name: 'src', type: 'filepicker', filetype: 'image', label: 'Source', autofocus: true, onchange: srcChange}
        ];

        if (editor.settings.image_description !== false) {
            generalFormItems.push({name: 'alt', type: 'textbox', label: 'Image description'});
        }

        if (editor.settings.image_dimensions !== false) {
            generalFormItems.push({
                type: 'container',
                label: 'Dimensions',
                layout: 'flex',
                direction: 'row',
                align: 'center',
                spacing: 5,
                items: [
                    {name: 'width', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Width'},
                    {type: 'label', text: 'x'},
                    {name: 'height', type: 'textbox', maxLength: 5, size: 3, onchange: recalcSize, ariaLabel: 'Height'},
                    {name: 'constrain', type: 'checkbox', checked: true, text: 'Constrain proportions'}
                ]
            });
        }

        generalFormItems.push(classListCtrl);

        win = editor.windowManager.open({
            title: 'Insert/edit image',
            data: data,
            body: generalFormItems,
            onSubmit: onSubmitForm,
            buttons: [{
                text: 'Cancel',
                onclick: 'close'
            },{
                text: 'Insert',
                classes: 'widget btn primary first abs-layout-item',
                onclick: 'submit'
            }]
         });
    }

    editor.addButton('image', {
        icon: 'image',
        title: 'Insert/edit image',
        onclick: function() {
            require(['io.ox/mail/write/inline-images'], function (inlineimages) {
                inlineimages.show().done(function (url) {
                    showDialog(url);
                });
            });
        }
    });

    /*
    Adds dropdown for upload and drive picker.
    This still needs some work and is deactivated for now.

    editor.addButton('image', {
        type: 'menubutton',
        icon: 'image',
        tooltip: 'Insert/edit image',
        menu: [
            {
                text: 'Upload',
                onclick: function () {
                    require(['io.ox/mail/write/inline-images'], function (inlineimages) {
                        inlineimages.show().done(function (url) {
                            showDialog(url);
                        });
                    });
                }
            },
            {
                text: 'Drive',
                onclick: function() {
                    // open ox filepicker
                    require(['io.ox/files/filepicker', 'io.ox/files/api', 'gettext!io.ox/files']).done(function (Picker, fileAPI, gt) {
                        var picker = new Picker({
                            primaryButtonText: gt('Add'),
                            multiselect: false,
                            filter: function (file) {
                                return (/\.(gif|bmp|tiff|jpe?g|gmp|png)$/i).test(file.filename);
                            },
                        });
                        picker.done(function (files) {
                            var url = '';
                            if (files[0]) {
                                url = fileAPI.getUrl(files[0], 'view');
                            }
                            showDialog(url);
                        });
                    });
                }
            }
        ]
    });
    */
});
