/**
 * plugin.js
 *
 * Copyright, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://www.tinymce.com/license
 * Contributing: http://www.tinymce.com/contributing
 */

/*global tinymce:true */

tinymce.PluginManager.add('oximage', function(editor) {

    function showDialog(url) {
        var dom = editor.dom,
            el = $(editor.contentAreaContainer || editor.bodyElement),
            imgElm = editor.selection.getNode(),
            data = {
                src: url,
                width: el.width() * 0.7
            },
            width, height, classListCtrl;

        function onSubmitForm() {
            function waitLoad(imgElm) {
                function selectImage() {
                    imgElm.onload = imgElm.onerror = null;
                    editor.selection.select(imgElm);
                    editor.nodeChanged();
                }

                imgElm.onload = function() {
                    if (!data.width && !data.height) {
                        dom.setAttribs(imgElm, {
                            width: imgElm.clientWidth,
                            height: imgElm.clientHeight
                        });
                    }
                };

                imgElm.onerror = selectImage;
            }

            // recalcSize();

            data = tinymce.extend(data, {});

            if (!data.alt) {
                data.alt = '';
            }

            if (data.width === '') {
                data.width = null;
            }

            if (data.height === '') {
                data.height = null;
            }

            if (data.style === '') {
                data.style = null;
            }

            data = {
                src: data.src,
                alt: data.alt,
                width: data.width,
                height: data.height,
                style: data.style,
                "class": data["class"]
            };

            if (!data["class"]) {
                delete data["class"];
            }

            editor.undoManager.transact(function() {
                if (!data.src) {
                    if (imgElm) {
                        dom.remove(imgElm);
                        editor.focus();
                        editor.nodeChanged();
                    }

                    return;
                }

                if (!imgElm) {
                    data.id = '__mcenew';
                    editor.focus();
                    editor.selection.setContent(dom.createHTML('img', data));
                    imgElm = dom.get('__mcenew');
                    dom.setAttrib(imgElm, 'id', null);
                } else {
                    dom.setAttribs(imgElm, data);
                }

                waitLoad(imgElm);
            });
        }

        width = dom.getAttrib(imgElm, 'width');
        height = dom.getAttrib(imgElm, 'height');

        if (imgElm.nodeName == 'IMG' && !imgElm.getAttribute('data-mce-object') && !imgElm.getAttribute('data-mce-placeholder')) {
            data = {
                src: dom.getAttrib(imgElm, 'src'),
                alt: dom.getAttrib(imgElm, 'alt'),
                "class": dom.getAttrib(imgElm, 'class'),
                width: width,
                height: height
            };
        } else {
            imgElm = null;
        }

        onSubmitForm();
    }

    editor.addButton('image', {
        icon: 'image',
        title: 'Insert image',
        onPostRender: (function () {

            function change(e) {

                var file = $(this), editor = e.data.editor;

                require(['io.ox/mail/compose/inline-images', 'io.ox/core/notifications', 'gettext!io.ox/mail'], function (inlineimages, notifications, gt) {

                    if (!(/\.(gif|bmp|tiff|jpe?g|gmp|png)$/i).test(file.val())) {
                        notifications.yell('error', gt('Please select a valid image File to insert'));
                    } else {
                        inlineimages.api.inlineImage({
                            file: file[0].files ? file[0].files[0] : [],
                            form: file.closest('form')
                        })
                        .then(
                            function success(data) {
                                $(editor.contentAreaContainer || editor.bodyElement).trigger('beforeInlineImage', data.data[0]);
                                showDialog(inlineimages.api.getInsertedImageUrl(data));
                                $(editor.contentAreaContainer || editor.bodyElement).trigger('addInlineImage', data.data[0]);
                            },
                            notifications.yell
                        );
                    }
                });
            }

            return function onPostRender() {

                var guid = _.uniqueId('form-control-label-');
                this.off('click');

                $(this.getEl()).empty().append(
                    $('<form method="post" accept-charset="UTF-8" class="mce-widget mce-btn mce-last btn-file"' +
                        ' enctype="multipart/form-data" role="presentation" tabindex="-1">'
                    )
                    .append(
                        $('<i class="mce-ico mce-i-image">').css('padding', '4px 10px'),
                        $('<label class="sr-only">')
                            .attr('for', guid),
                        $('<input name="file" type="file" class="file-input">')
                            .attr('id', guid)
                            .on('change', { editor: editor }, change)
                    )
                );
            };
        }())
    });

    /*
    Adds dropdown for upload and drive picker.
    This still needs some work and is deactivated for now.

    editor.addButton('image', {
        type: 'menubutton',
        icon: 'image',
        tooltip: 'Insert image',
        menu: [
            {
                text: 'Upload',
                onclick: function () {
                    require(['io.ox/mail/compose/inline-images'], function (inlineimages) {
                        inlineimages.show().done(function (url) {
                            showDialog(url);
                        });
                    });
                }
            },
            {
                text: 'Drive',
                onclick: function() {
                    // open ox filepicker
                    require(['io.ox/files/filepicker', 'io.ox/files/api', 'gettext!io.ox/files']).done(function (Picker, fileAPI, gt) {
                        var picker = new Picker({
                            primaryButtonText: gt('Add'),
                            multiselect: false,
                            filter: function (file) {
                                return (/\.(gif|bmp|tiff|jpe?g|gmp|png)$/i).test(file.filename);
                            },
                        });
                        picker.done(function (files) {
                            var url = '';
                            if (files[0]) {
                                url = fileAPI.getUrl(files[0], 'view');
                            }
                            showDialog(url);
                        });
                    });
                }
            }
        ]
    });
    */
});
