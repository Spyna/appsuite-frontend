/**
 * All content on this website (including text, images, source
 * code and any other original works), unless otherwise noted,
 * is licensed under a Creative Commons License.
 * 
 * http://creativecommons.org/licenses/by-nc-sa/2.5/
 * 
 * Copyright (C) Open-Xchange Inc., 2011
 * Mail: info@open-xchange.com 
 * 
 * @author Viktor Pracht <viktor.pracht@open-xchange.com>
 */

var fs = require("fs");
var path = require("path");
var globSync = require("./glob").globSync;

/**
 * Default destination directory.
 * @type String
 * @name exports.builddir
 */

/**
 * Resolves a filename relative to the build directory.
 * @param {String} name The filename to resolve
 * @type String
 * @return The filename in the build directory.
 */
exports.dest = function(name) { return path.join(exports.builddir, name); };

/**
 * Number of generated files.
 * @type Number
 */
var counter = 0;

exports.startTime = new Date;

/**
 * The name of the current top-level task, if any.
 * @type String
 */
var topLevelTaskName;

/**
 * Defines a new top-level task.
 * Any subsequent file utility functions will add their target files to this
 * task as dependencies.
 * @param {String} name An optional name of the new task. If not specified,
 * no new task is created and automatic dependencies won't be created anymore.
 */
exports.topLevelTask = function(name) {
    topLevelTaskName = name;
    if (name) task.apply(this, arguments);
};

/**
 * Callback for top-level tasks to report the number of generated files and the
 * build time.
 */
exports.summary = function() {
    var seconds = ((new Date).getTime() - exports.startTime.getTime()) / 1000;
    console.log("Generated " + counter + (counter == 1 ? " file" : " files") +
        " in " + seconds.toFixed(3) + "s");
};

/**
 * Copies one or more files.
 * Any missing directories are created automatically.
 * @param {Array} files An array of strings specifying filenames to copy.
 * @param {String} files.dir An optional common parent directory. All filenames
 * in files are relative to it. Defaults to the project root.
 * @param {Object} options An optional object containing various options.
 * @param {String} options.to An optional target directory. The target
 * filenames are generated by resolving each filename from files relative to
 * options.to instead of files.dir.
 * @param {Function} options.filter An optional filter function which takes
 * the contents of a file as parameter and returns the filtered contents.
 */
exports.copy = function(files, options) {
    var srcDir = files.dir || "";
    var destDir = options && options.to || exports.builddir;
    var filter = options && options.filter;
    for (var i = 0; i < files.length; i++) {
        exports.copyFile(path.join(srcDir, files[i]),
                         path.join(destDir, files[i]), filter);
    }
};

/**
 * Copies a single file.
 * Any missing directories are created automatically.
 * @param {String} src The filename of the source file.
 * @param {String} dest The filename of the target file.
 * @param {Function} filter An optional filter function which takes the contents
 * of the file as parameter and returns the filtered contents.
 */
exports.copyFile = function(src, dest, filter) {
    var dir = path.dirname(dest);
    directory(dir);
    file(dest, [src, dir, "Jakefile.js"], filter ? function() {
        fs.writeFileSync(dest, filter(fs.readFileSync(src, "utf8")));
        counter++;
    } : function() {
        var data = fs.readFileSync(src);
        fs.writeFileSync(dest, data, 0, data.length, null);
        counter++;
    });
    if (topLevelTaskName) task(topLevelTaskName, [dest]);
};

/**
 * Concatenates one or more files and strings to a single file.
 * Any missing directories are created automatically.
 * @param {String} name The name of the destination file relative to the build
 * directory.
 * @param {Array} files An array of things to concatenate.
 * Plain strings are interpreted as filenames relative to files.dir,
 * objects having a method getData should return the contents as a string.
 * @param {String} files.dir An optional common parent directory. All filenames
 * in files are relative to it. Defaults to the project root.
 * @param {Object} options An optional object containing various options.
 * @param {Function} options.filter An optional filter function which takes
 * the concatenated contents as parameter and returns the filtered contents.
 */
exports.concat = function(name, files, options) {
    var srcDir = files.dir || "";
    var dest = path.join(exports.builddir, name);
    var destDir = path.dirname(dest);
    var deps = [];
    var filter = options && options.filter;
    for (var i = 0; i < files.length; i++) {
        if (typeof files[i] == "string") deps.push(path.join(srcDir, files[i]));
    }
    deps.push(destDir);
    deps.push("Jakefile.js");
    directory(destDir);
    file(dest, deps, function() {
        var fd = fs.openSync(dest, "w");
        if (filter) {
            var data = [];
            for (var i = 0; i < files.length; i++) {
                data.push(typeof files[i] == "string" ?
                    fs.readFileSync(path.join(srcDir, files[i]), "utf8") :
                    files[i].getData());
            }
            fs.writeSync(fd, filter(data.join("")), null);
        } else {
            for (var i = 0; i < files.length; i++) {
                var data = typeof files[i] == "string" ?
                    fs.readFileSync(path.join(srcDir, files[i])) :
                    new Buffer(files[i].getData());
                fs.writeSync(fd, data, 0, data.length, null);
            }
        }
        fs.closeSync(fd);
        counter++;
    });
    if (topLevelTaskName) task(topLevelTaskName, [dest]);
};

/**
 * Returns a list of filenames specified by a root directory and one or more
 * glob patterns.
 * @param {String} dir Optional root directory. Defaults to the project root.
 * @param {String or Array of String} globs One or more glob patterns.
 * @type Array of String
 * @returns An array of file names relative to dir, which match the specified
 * patterns.
 * The property dir is set to the parameter dir for use with copy and concat.
 */
exports.list = function(dir, globs) {
    if (globs === undefined) {
        globs = dir;
        dir = "";
    }
    if (typeof globs == "string") globs = [globs];
    var arrays = globs.map(function(s) { return globSync(dir, s); });
    var retval = Array.prototype.concat.apply([], arrays);
    retval.dir = dir;
    return retval;
};
