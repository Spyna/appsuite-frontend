---

stages:
  - test
  - deploy

build ui docker image:
  script:
    # copy everything to docker directory, this way we get files from all built packages, ui, tours, help etc
    - cp -r */build docker
    - cp -r */dist docker
    - docker build --pull -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} docker/
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  stage: test
  dependencies:
    - build ui
  needs:
    - build ui
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_REF_NAME !~ /^e2e\//'
      changes:
        - ui/**/*
      when: on_success


.tag docker image: &add_tag
  stage: deploy
  dependencies: [] # none
  tags:
    - docker
  script:
    - "[ -z $TAG_NAME ] && export TAG_NAME=$(echo $CI_JOB_NAME | sed 's/tag //') || true"
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:${TAG_NAME}
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker push ${CI_REGISTRY_IMAGE}:${TAG_NAME}

tag latest:
  # create a tag on the docker registry, :latest always means last build on develop branch
  <<: *add_tag
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: on_success


tag stable:
  <<: *add_tag
  rules:
    - if: '$CI_COMMIT_REF_NAME == "master"'
      when: on_success

tag tags:
  <<: *add_tag
  variables:
    TAG_NAME: ${CI_COMMIT_TAG}
  rules:
    - if: '$CI_COMMIT_TAG'
      when: on_success
