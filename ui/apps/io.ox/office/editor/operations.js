/**
 * All content on this website (including text, images, source
 * code and any other original works), unless otherwise noted,
 * is licensed under a Creative Commons License.
 *
 * http://creativecommons.org/licenses/by-nc-sa/2.5/
 *
 * Copyright (C) Open-Xchange Inc., 2006-2012
 * Mail: info@open-xchange.com
 *
 * @author Ingo Schmidt-Rosbiegal <ingo.schmidt-rosbiegal@open-xchange.com>
 * @author Daniel Rentz <daniel.rentz@open-xchange.com>
 */

define('io.ox/office/editor/operations',
    ['io.ox/office/tk/utils',
     'io.ox/office/editor/dom',
     'io.ox/office/editor/format/stylesheets'
    ], function (Utils, DOM, StyleSheets) {

    'use strict';

    // private global functions ===============================================

    /**
     * Creates a clone of the passed logical position and appends the index 0.
     * The passed array object will not be changed.
     *
     * @param {Number[]} position
     *  The initial logical position.
     *
     * @returns {Number[]}
     *  A clone of the passed logical position, with the index 0 appended.
     */
    function createLastIndex(position) {
        position = _.clone(position);
        position.push(0);
        return position;
    }

    /**
     * Creates a clone of the passed logical position and increases the last
     * element of the array by the specified offset. The passed array object
     * will not be changed.
     *
     * @param {Number[]} position
     *  The initial logical position.
     *
     * @param {Number} [offset=1]
     *  The offset that will be added to the last index of the position.
     *
     * @returns {Number[]}
     *  A clone of the passed logical position, with the last index increased.
     */
    function increaseLastIndex(position, offset) {
        position = _.clone(position);
        position[position.length - 1] += (_.isNumber(offset) ? offset : 1);
        return position;
    }

    // static class Operations ================================================

    /**
     * Defines the names of all supported operations and static helper
     * functions to generate operations from DOM structures and selections.
     */
    var Operations = {

        DELETE: 'delete',
        MOVE: 'move',

        TEXT_INSERT: 'insertText',
        TEXT_DELETE: 'deleteText',

        PARA_INSERT: 'insertParagraph',
        PARA_DELETE: 'deleteParagraph',
        PARA_SPLIT: 'splitParagraph',
        PARA_MERGE: 'mergeParagraph',

        TABLE_INSERT: 'insertTable',
        TABLE_DELETE: 'deleteTable',
        CELLRANGE_DELETE: 'deleteCellRange',
        ROWS_DELETE: 'deleteRows',
        COLUMNS_DELETE: 'deleteColumns',
        CELLS_DELETE: 'deleteCells',
        ROW_INSERT: 'insertRow',
        COLUMN_INSERT: 'insertColumn',
        CELL_INSERT: 'insertCell',

        INSERT_STYLE: 'insertStylesheet',
        ATTRS_SET: 'setAttributes',

        IMAGE_INSERT: 'insertImage',
        FIELD_INSERT: 'insertField'
        // ATTR_DELETE:  'deleteAttribute'

    };

    // methods ----------------------------------------------------------------

    /**
     * Generates the operations needed to recreate the contents of the passed
     * paragraph node. Note that the operation to create the paragraph itself
     * will NOT be generated.
     *
     * @param {Object[]} operations
     *  (in/out) An array of operations that will generate the contents of the
     *  passed paragraph, if applied to an empty paragraph node located at the
     *  passed logical position. All operations generated by this method will
     *  be appended to this operations array.
     *
     * @param {HTMLElement|jQuery} paragraph
     *  The paragraph element whose contents will be converted to operations.
     *  If this object is a jQuery collection, uses the first node it contains.
     *
     * @param {Number[]} position
     *  The logical position of the passed paragraph node. The generated
     *  operations will contain positions located relatively to this address.
     */
    Operations.generateOperationsForParagraph = function (operations, paragraph, position) {

        // initial position of the first child content node (creates a clone of the array)
        position = createLastIndex(position);

        // iterate all child elements of the root node and create operations
        Utils.iterateDescendantNodes(paragraph, function (node) {

            var // element name of the current node
                name = Utils.getNodeName(node),
                // explicit attributes of the current element
                attributes = StyleSheets.getExplicitAttributes(node),
                // end position of a text span
                endPosition = null,
                // text contents of a text span
                text = $(node).text();

            // text fields
            if (DOM.isFieldSpan(node)) {
                // end position of the field span (closed range, single character)
                endPosition = position;
                // operation to create the field span element
                // TODO: field type
                operations.push({ name: Operations.FIELD_INSERT, position: position, representation: text });
            }

            // simple text spans
            else if (DOM.isTextSpan(node)) {
                // empty text node: continue with next child node
                if (text.length === 0) { return; }
                // end position of the text span (closed range)
                endPosition = increaseLastIndex(position, text.length - 1);
                // operation to create the text span
                operations.push({ name: Operations.TEXT_INSERT, start: position, text: text });
            }

            // unknown node: continue with next child node
            else {
                Utils.warn('Operations.generateOperationsForParagraph(): unexpected node "' + name + '" at position ' + JSON.stringify(position) + '.');
                return;
            }

            // operation to change the formatting attributes
            if (!_.isEmpty(attributes)) {
                operations.push({ name: Operations.ATTRS_SET, start: position, end: endPosition, attrs: attributes });
            }

            // increase last index (one after last character of the current element)
            position = increaseLastIndex(endPosition);

        }, undefined, { children: true });

    };

    /**
     * Generates the operations needed to recreate the structure and contents
     * of the passed table node. Note that the operation to create the table
     * itself will NOT be generated.
     *
     * @param {Object[]} operations
     *  (in/out) An array of operations that will generate the structure and
     *  contents of the passed table, if applied to an empty table node located
     *  at the passed logical position. All operations generated by this method
     *  will be appended to this operations array.
     *
     * @param {HTMLElement|jQuery} table
     *  The table element whose structure and contents will be converted to
     *  operations. If this object is a jQuery collection, uses the first node
     *  it contains.
     *
     * @param {Number[]} position
     *  The logical position of the passed table node. The generated operations
     *  will contain positions located relatively to this address.
     */
    Operations.generateOperationsForTable = function (operations, table, position) {
    };

    /**
     * Generates the operations needed to recreate the contents of the passed
     * root node. Root nodes are container elements for text paragraphs and
     * other first-level content nodes (e.g. tables). Examples for root nodes
     * are the entire document root node, table cells, or text shapes. Note
     * that the operation to create the root node itself will NOT be generated.
     *
     * @param {Object[]} operations
     *  (in/out) An array of operations that will generate the contents of the
     *  passed root node, if applied to an empty node located at the passed
     *  logical position. All operations generated by this method will be
     *  appended to this operations array.
     *
     * @param {HTMLElement|jQuery} rootNode
     *  The root element containing the content nodes that will be converted
     *  to operations. If this object is a jQuery collection, uses the first
     *  node it contains.
     *
     * @param {Number[]} position
     *  The logical position of the passed root node. The generated operations
     *  will contain positions located relatively to this address.
     */
    Operations.generateOperationsForRootNode = function (operations, rootNode, position) {

        var // all root elements will contain an empty paragraph after creation
            initialParagraph = true;

        // initial position of the first child content node (creates a clone of the array)
        position = createLastIndex(position);

        // iterate all child elements of the root node and create operations
        Utils.iterateDescendantNodes(rootNode, function (node) {

            var // element name of the current node
                name = Utils.getNodeName(node),
                // explicit attributes of the current element
                attributes = StyleSheets.getExplicitAttributes(node);

            switch (name) {
            case 'p':
                // operation to create the paragraph element (first paragraph exists already)
                if (initialParagraph) {
                    initialParagraph = false;
                } else {
                    operations.push({ name: Operations.PARA_INSERT, position: position, attrs: attributes });
                }
                // operations to create the paragraph contents
                Operations.generateOperationsForParagraph(operations, node, position);
                // increase last index
                position = increaseLastIndex(position);
                break;
            case 'table':
                // operation to create the table element
                operations.push({ name: Operations.TABLE_INSERT, position: position, attrs: attributes });
                // operations to create the table structure and contents
                Operations.generateOperationsForTable(operations, node, position);
                // increase last index
                position = increaseLastIndex(position);
                break;
            default:
                Utils.warn('Operations.generateOperationsForRootNode(): unexpected node "' + name + '" at position ' + JSON.stringify(position) + '.');
            }

        }, undefined, { children: true });

    };

    // exports ================================================================

    return Operations;

});
