image: docker:latest

stages:
  - prepare
  - build
  - test
  - packaging
  - deploy
  - e2e
  - cleanup

variables:
  PROXY_HOST: npm.open-xchange.com

.use_proxy_template: &use_npm_proxy
  before_script:
    - export HTTP_PROXY=http://${PROXY_HOST}:8123/
    - export HTTPS_PROXY=http://${PROXY_HOST}:8123/
    # custom registry sometimes breaks yarn, deactivate until clarification
    #- npm config set registry http://${PROXY_HOST}:8080/

.install_deps_template: &install_deps
  <<: *use_npm_proxy
  image: gitlab.open-xchange.com:4567/frontend/dev_env:0.0.2
  stage: prepare
  script:
    - cd ${PROJECT_PATH}
    - yarn
    - yarn clean
  cache:
    # use one cache per project and branch
    # ex.: ui_feature/gitlab_ci
    key: ${PROJECT_PATH}_${CI_COMMIT_REF_NAME}
    paths:
      - "${PROJECT_PATH}/node_modules"
  artifacts:
    name: ${PROJECT_PATH}_dependencies
    expire_in: 2 hours
    paths:
      - ${PROJECT_PATH}/node_modules

install_deps_ui:
  variables:
    PROJECT_PATH: ui
  <<: *install_deps

install_deps_update-themes:
  variables:
    PROJECT_PATH: update-themes
  <<: *install_deps

install_deps_help:
  variables:
    PROJECT_PATH: help
  <<: *install_deps

install_deps_saml:
  variables:
    PROJECT_PATH: open-xchange-appsuite-saml
  <<: *install_deps

install_deps_dynamic-theme:
  variables:
    PROJECT_PATH: open-xchange-dynamic-theme
  <<: *install_deps

install_deps_spamexperts:
  variables:
    PROJECT_PATH: open-xchange-appsuite-spamexperts
  <<: *install_deps

install_deps_guidedtours:
  variables:
    PROJECT_PATH: guidedtours
  <<: *install_deps

.build_ui: &build_ui
  <<: *use_npm_proxy
  image: gitlab.open-xchange.com:4567/frontend/dev_env:0.0.2
  dependencies:
    - install_deps_ui
  script:
    - cd ui
    - grunt ${CI_JOB_NAME}
  stage: build
  artifacts:
    expire_in: 2hours
    paths:
      - ui/build
      - ui/dist

# split build_ui into 2 build jobs (running on 2 different runners in parallel)
# this distributes workload onto 2 runners instead of one and basically halves build time
lint copy_build compile_po concat:bootjs uglify:dist_largeFiles less copy_dist:
  <<: *build_ui
  tags:
    - openstack

copy_build compile_po concat uglify:dist uglify:dist_i18n create_i18n_properties copy_dist:
  <<: *build_ui
  tags:
    - openstack

docker_image_ui:
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}:ui_${CI_COMMIT_REF_SLUG} ui/
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN gitlab.open-xchange.com:4567
    - docker push gitlab.open-xchange.com:4567/frontend/core:ui_${CI_COMMIT_REF_SLUG}
  stage: packaging
  dependencies:
    - install_deps_ui
    - lint copy_build compile_po concat:bootjs uglify:dist_largeFiles less copy_dist
    - copy_build compile_po concat uglify:dist uglify:dist_i18n create_i18n_properties copy_dist

test_ui:
  image: gitlab.open-xchange.com:4567/frontend/dev_env:0.0.2
  script:
    - cd ui
    - /app/run.sh test
  stage: test
  dependencies:
    - install_deps_ui
    - lint copy_build compile_po concat:bootjs uglify:dist_largeFiles less copy_dist
    - copy_build compile_po concat uglify:dist uglify:dist_i18n create_i18n_properties copy_dist

.tag docker image: &add_tag
  stage: deploy
  dependencies: [] # none
  script:
    - "[ -z $TAG_NAME ] && export TAG_NAME=$(echo $CI_JOB_NAME | sed 's/tag //') || true"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN gitlab.open-xchange.com:4567
    - docker pull ${CI_REGISTRY_IMAGE}:ui_${CI_COMMIT_REF_SLUG}
    - docker tag ${CI_REGISTRY_IMAGE}:ui_${CI_COMMIT_REF_SLUG} ${CI_REGISTRY_IMAGE}:${TAG_NAME}
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN gitlab.open-xchange.com:4567
    - docker push ${CI_REGISTRY_IMAGE}:${TAG_NAME}

tag latest:
  # create a tag on the docker registry, :latest always means last build on develop branch
  <<: *add_tag
  only:
    - develop

tag stable:
  <<: *add_tag
  only:
    - master

tag tags:
  <<: *add_tag
  variables:
    TAG_NAME: ${CI_COMMIT_TAG}
  only:
    - tags

deploy preview app:
  stage: deploy
  dependencies: []
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: docker.ui.cloud.open-xchange.com
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:ui_$CI_COMMIT_REF_SLUG
    SERVER: http://10.20.28.164/appsuite/
  script:
    - docker pull $DOCKER_IMAGE
    - docker stop $CI_COMMIT_REF_SLUG || echo "Nothing to stop"
    - counter=0; while [ $counter -lt 10 ]; do sleep 2; docker run --name $CI_COMMIT_REF_SLUG --rm -d -e SERVER=$SERVER $DOCKER_IMAGE && break || counter=$((counter+1)); done
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_COMMIT_REF_SLUG.ui.cloud.open-xchange.com/appsuite/
    on_stop: stop_review
  only:
    - /^feature\//
    - /^bug\//
    - /^poc\//

stop_review:
  stage: cleanup
  dependencies: []
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: docker.ui.cloud.open-xchange.com
  script:
    - docker stop $CI_COMMIT_REF_SLUG
  when: manual
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - /^feature\//
    - /^bug\//
    - /^poc\//

deploy e2e testserver:
  stage: deploy
  dependencies: []
  variables:
    DOCKER_HOST: docker.ui.cloud.open-xchange.com
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:ui_$CI_COMMIT_REF_SLUG
    CONTAINER_NAME: e2e_$CI_COMMIT_REF_SLUG
    SERVER: http://10.20.28.164/appsuite/
  script:
    - docker pull $DOCKER_IMAGE
    - docker container create --name $CONTAINER_NAME -e SERVER=$SERVER -v /app/build/e2e $DOCKER_IMAGE e2e
    - docker container cp ui/nightwatch/fixtures $CONTAINER_NAME:/app/build/e2e
    - docker container start $CONTAINER_NAME

run e2e tests:
  stage: e2e
  dependencies:
    - install_deps_ui
  image: gitlab.open-xchange.com:4567/frontend/dev_env:0.0.2
  variables:
    LAUNCH_URL: http://e2e-$CI_COMMIT_REF_SLUG.ui.cloud.open-xchange.com/appsuite/
  script:
    - cd ui
    - grunt nightwatch
  artifacts:
    paths:
      - ui/build/e2e/screenshots

stop e2e testserver:
  stage: cleanup
  dependencies: []
  variables:
    GIT_STRATEGY: none
    DOCKER_HOST: docker.ui.cloud.open-xchange.com
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE:ui_$CI_COMMIT_REF_SLUG
    CONTAINER_NAME: e2e_$CI_COMMIT_REF_SLUG
  script:
    - docker container stop $CONTAINER_NAME || true
    - docker container wait $CONTAINER_NAME || true
    - docker container rm $CONTAINER_NAME || true
  when: always

.build_ui_plugin_template: &build_ui_plugin
  <<: *use_npm_proxy
  image: gitlab.open-xchange.com:4567/frontend/dev_env:0.0.2
  stage: build
  script:
    - cd ${PROJECT_PATH}
    - grunt dist:build
  artifacts:
    expire_in: 2hours
    paths:
      - ${PROJECT_PATH}/build
      - ${PROJECT_PATH}/dist

build_help:
  dependencies:
    - install_deps_help
  variables:
    PROJECT_PATH: help
  <<: *build_ui_plugin

build_guidedtours:
  dependencies:
    - install_deps_guidedtours
  variables:
    PROJECT_PATH: guidedtours
  <<: *build_ui_plugin

build_saml:
  dependencies:
    - install_deps_saml
  variables:
    PROJECT_PATH: open-xchange-appsuite-saml
  <<: *build_ui_plugin

build_spamexperts:
  dependencies:
    - install_deps_spamexperts
  variables:
    PROJECT_PATH: open-xchange-appsuite-spamexperts
  <<: *build_ui_plugin

build_dynamic-theme:
  dependencies:
    - install_deps_dynamic-theme
  variables:
    PROJECT_PATH: open-xchange-dynamic-theme
  <<: *build_ui_plugin

create project on OBS:
  image: gitlab.open-xchange.com:4567/frontend/dev_env:ant
  stage: test
  dependencies: []
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  before_script:
    - echo "${OBS_OSCRC}" >> ~/.oscrc
  script:
    - cd build
    - ant -f buildAll.xml -DshortProductName=frontend -Dbranch=${CI_COMMIT_REF_SLUG} -DprojectSets=frontend-packages determineProject createProject
  environment:
    name: packages/$CI_COMMIT_REF_NAME
    on_stop: "cleanup review"
    url: http://buildservice.open-xchange.com/frontend-$CI_COMMIT_REF_SLUG/
  only:
    - /^feature\//
    - /^poc\//
    - /^bug\//

.upload source packages template: &buildpkg_on_obs
  image: gitlab.open-xchange.com:4567/frontend/dev_env:ant
  stage: packaging
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - cd build
    # optionally apply patch
    - patch -p1 -N < ../noNode.patch || true
    - export PACKAGE_NAME=$(echo $CI_JOB_NAME | sed "s,package ,,")
    - ant -f build.xml -Dproject=frontend-${CI_COMMIT_REF_SLUG} -DpackageName=$PACKAGE_NAME -DkeepCache=true -Dnode=echo -DnoNode=true -Dnoclean=true debianSource upload
  only:
    - /^feature\//
    - /^poc\//
    - /^bug\//

package open-xchange-appsuite:
  dependencies:
    - install_deps_ui
    - install_deps_update-themes
  <<: *buildpkg_on_obs

package open-xchange-dynamic-theme:
  dependencies:
    - install_deps_dynamic-theme
  <<: *buildpkg_on_obs

package open-xchange-guidedtours:
  dependencies:
    - install_deps_guidedtours
  <<: *buildpkg_on_obs

package open-xchange-appsuite-help:
  dependencies:
    - install_deps_help
  <<: *buildpkg_on_obs

package open-xchange-appsuite-saml:
  dependencies:
    - install_deps_saml
  <<: *buildpkg_on_obs

package open-xchange-appsuite-spamexperts:
  dependencies:
    - install_deps_spamexperts
  <<: *buildpkg_on_obs

cleanup review:
  image: gitlab.open-xchange.com:4567/frontend/osc_env:latest
  stage: cleanup
  dependencies: []
  variables:
    GIT_STRATEGY: none
  before_script:
    - echo "${OBS_OSCRC}" >> ~/.oscrc
  script:
    - for P in open-xchange-appsuite open-xchange-dynamic-theme open-xchange-guidedtours open-xchange-appsuite-help open-xchange-appsuite-saml open-xchange-appsuite-spamexperts; do osc rdelete frontend-${CI_COMMIT_REF_SLUG} $P -m "GitLab CI environment stopped for $P" || echo "Could not remove $P, ignoring"; done
    - osc rdelete frontend-${CI_COMMIT_REF_SLUG} -m "GitLab CI environment stopped" || echo "Leaving non-empty project on OBS"
  when: manual
  environment:
    name: packages/$CI_COMMIT_REF_NAME
    action: stop
